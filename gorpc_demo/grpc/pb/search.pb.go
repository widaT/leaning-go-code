// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

//protoc --go_out=plugins=grpc:. search.proto
//protoc --grpc_out=. --plugin=protoc-gen-pb=`which grpc_cpp_plugin` search.proto
//protoc --cpp_out=. search.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SearchReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchReply) Reset()         { *m = SearchReply{} }
func (m *SearchReply) String() string { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()    {}
func (*SearchReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

func (m *SearchReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchReply.Unmarshal(m, b)
}
func (m *SearchReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchReply.Marshal(b, m, deterministic)
}
func (m *SearchReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchReply.Merge(m, src)
}
func (m *SearchReply) XXX_Size() int {
	return xxx_messageInfo_SearchReply.Size(m)
}
func (m *SearchReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchReply.DiscardUnknown(m)
}

var xxx_messageInfo_SearchReply proto.InternalMessageInfo

func (m *SearchReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "pb.SearchRequest")
	proto.RegisterType((*SearchReply)(nil), "pb.SearchReply")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe6, 0xe2,
	0x0d, 0x06, 0x8b, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25,
	0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x8a, 0x5c, 0xdc, 0x30,
	0x45, 0x05, 0x39, 0x95, 0xd8, 0x94, 0x18, 0xe5, 0x73, 0x71, 0x40, 0x94, 0xa4, 0x16, 0x09, 0xe9,
	0x71, 0xb1, 0x41, 0xd8, 0x42, 0x82, 0x7a, 0x05, 0x49, 0x7a, 0x28, 0xe6, 0x4b, 0xf1, 0x23, 0x0b,
	0x15, 0xe4, 0x54, 0x2a, 0x31, 0x08, 0x19, 0x73, 0xb1, 0x43, 0x04, 0x8c, 0x88, 0xd3, 0xa0, 0xc1,
	0x68, 0xc0, 0x98, 0xc4, 0x06, 0xf6, 0x83, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x2f, 0x2d,
	0xf1, 0xd3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearcherClient is the client API for Searcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearcherClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	Search2(ctx context.Context, opts ...grpc.CallOption) (Searcher_Search2Client, error)
}

type searcherClient struct {
	cc *grpc.ClientConn
}

func NewSearcherClient(cc *grpc.ClientConn) SearcherClient {
	return &searcherClient{cc}
}

func (c *searcherClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/pb.Searcher/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searcherClient) Search2(ctx context.Context, opts ...grpc.CallOption) (Searcher_Search2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Searcher_serviceDesc.Streams[0], "/pb.Searcher/Search2", opts...)
	if err != nil {
		return nil, err
	}
	x := &searcherSearch2Client{stream}
	return x, nil
}

type Searcher_Search2Client interface {
	Send(*SearchRequest) error
	Recv() (*SearchReply, error)
	grpc.ClientStream
}

type searcherSearch2Client struct {
	grpc.ClientStream
}

func (x *searcherSearch2Client) Send(m *SearchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searcherSearch2Client) Recv() (*SearchReply, error) {
	m := new(SearchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearcherServer is the server API for Searcher service.
type SearcherServer interface {
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	Search2(Searcher_Search2Server) error
}

// UnimplementedSearcherServer can be embedded to have forward compatible implementations.
type UnimplementedSearcherServer struct {
}

func (*UnimplementedSearcherServer) Search(ctx context.Context, req *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSearcherServer) Search2(srv Searcher_Search2Server) error {
	return status.Errorf(codes.Unimplemented, "method Search2 not implemented")
}

func RegisterSearcherServer(s *grpc.Server, srv SearcherServer) {
	s.RegisterService(&_Searcher_serviceDesc, srv)
}

func _Searcher_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Searcher/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Searcher_Search2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearcherServer).Search2(&searcherSearch2Server{stream})
}

type Searcher_Search2Server interface {
	Send(*SearchReply) error
	Recv() (*SearchRequest, error)
	grpc.ServerStream
}

type searcherSearch2Server struct {
	grpc.ServerStream
}

func (x *searcherSearch2Server) Send(m *SearchReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searcherSearch2Server) Recv() (*SearchRequest, error) {
	m := new(SearchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Searcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Searcher",
	HandlerType: (*SearcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Searcher_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search2",
			Handler:       _Searcher_Search2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "search.proto",
}
